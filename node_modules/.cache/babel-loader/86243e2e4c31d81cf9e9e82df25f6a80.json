{"ast":null,"code":"import { intersect } from '@turf/turf';\nimport * as d3 from 'd3';\nexport const fetchCensusData = request => fetch(request).then(res => res.json());\nexport const addData = (geo, data) => {\n  const newFeatures = [];\n\n  for (const feat in geo.features) {\n    const newFeature = geo.features[feat];\n    const geoId = geo.features[feat].properties.GEO_ID.split('US')[1];\n\n    if (data[geoId]) {\n      const dataItem = data[geoId];\n      const newData = {};\n      Object.keys(dataItem).forEach(key => {\n        const newKey = key.split('_')[1];\n        newData[newKey] = dataItem[key];\n      });\n      newFeature.properties['dataValue'] = newData;\n      newFeatures.push(newFeature);\n    }\n  }\n\n  return newFeatures;\n};\nexport const getIntersect = (bounds, geo) => {\n  const intrsctPolys = [];\n  if (!geo) return [];\n\n  for (const i in geo) {\n    const geo_poly = geo[i];\n    const intrsct = intersect(bounds, geo_poly);\n\n    if (intrsct != null) {\n      intrsctPolys.push(geo_poly);\n    }\n  }\n\n  return intrsctPolys;\n};\nexport const coordsToJSON = coords => {\n  const lat_NE = coords[0][0];\n  const lng_NE = coords[0][1];\n  const lat_SW = coords[1][0];\n  const lng_SW = coords[1][1];\n  const poly = [[[lng_NE, lat_NE], [lng_NE, lat_SW], [lng_SW, lat_SW], [lng_SW, lat_NE], [lng_NE, lat_NE]]];\n  return poly;\n};\nexport const createRequest = (group, variable) => {\n  const url = 'https://better-census-api.com/';\n  const request = url + 'gettable?vintage=2018&dataset=acs5&group=' + group + '&state=36&county=*&geography=county&key=32dd72aa5e814e89c669a4664fd31dcfc3df333d&variable=' + variable;\n  return request;\n};\nexport const createChartRequest = (group, variable) => {\n  const url = 'https://better-census-api.com/';\n  const request = url + 'gettable?vintage=2018&dataset=acs1&group=' + group + '&state=36&county=*&geography=county&key=32dd72aa5e814e89c669a4664fd31dcfc3df333d&variable=' + variable;\n  return request;\n};\n\nconst roundUpShare = (val, interval) => {\n  const ceil = Math.ceil(val * 10) / 10;\n  if (ceil * 100 / interval * 100 % 1 === 0) return ceil;else return ceil + interval;\n};\n\nexport const drawChart = (data, target) => {\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 75\n  },\n        width = 400 - margin.left - margin.right,\n        height = 300 - margin.top - margin.bottom;\n  const y = d3.scaleBand().range([height, 0]).padding(0.1);\n  const x = d3.scaleLinear().range([0, width]);\n  const svg = d3.select(target).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n  const keys = Object.keys(data);\n  const values = Object.values(data);\n  const xMax = roundUpShare(d3.max(values), 0.1);\n  x.domain([0, xMax]);\n  y.domain(keys);\n  let bar = svg.append('g').attr('fill', 'steelblue').selectAll('rect').data(keys).join('rect').style('mix-blend-mode', 'multiply').attr('x', x(0)).attr('y', d => y(d)).attr('width', d => x(data[d]) - x(0)).attr('height', y.bandwidth() - 1);\n  svg.append('g').call(d3.axisLeft(y));\n\n  const xAxis = (g, x) => g.attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x).ticks(8, 'f', '%')).call(g => (g.selection ? g.selection() : g).select('.domain').remove());\n\n  const gx = svg.append('g').call(xAxis, x);\n  return Object.assign(svg.node(), {\n    update(data) {\n      const keys = Object.keys(data);\n      const values = Object.values(data);\n      const t = svg.transition().duration(750);\n      let maxValue = d3.max(values);\n      if (!maxValue) maxValue = 0;\n      const xMax = roundUpShare(maxValue, 0.1); //@ts-ignore\n\n      gx.transition(t).call(xAxis, x.domain([0, xMax]));\n      bar = bar.data(keys).call(bar => bar.transition(t).attr('width', d => x(data[d]) - x(0)).attr('y', d => y(d)));\n    }\n\n  });\n};","map":{"version":3,"sources":["/home/pantero/Code/Codeworks/census-godzilla/src/helpers/Helpers.tsx"],"names":["intersect","d3","fetchCensusData","request","fetch","then","res","json","addData","geo","data","newFeatures","feat","features","newFeature","geoId","properties","GEO_ID","split","dataItem","newData","Object","keys","forEach","key","newKey","push","getIntersect","bounds","intrsctPolys","i","geo_poly","intrsct","coordsToJSON","coords","lat_NE","lng_NE","lat_SW","lng_SW","poly","createRequest","group","variable","url","createChartRequest","roundUpShare","val","interval","ceil","Math","drawChart","target","margin","top","right","bottom","left","width","height","y","scaleBand","range","padding","x","scaleLinear","svg","select","append","attr","values","xMax","max","domain","bar","selectAll","join","style","d","bandwidth","call","axisLeft","xAxis","g","axisBottom","ticks","selection","remove","gx","assign","node","update","t","transition","duration","maxValue"],"mappings":"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","sourcesContent":["import { Feature, intersect, Polygon, Properties } from '@turf/turf';\nimport * as d3 from 'd3';\n\ntype AnyObject = { [key: string]: any };\n\n\n\nexport const fetchCensusData = (request: string) => fetch(request).then((res) => res.json());\n\nexport const addData = (geo: AnyObject, data: AnyObject) => {\n  const newFeatures = [];\n  for (const feat in geo.features) {\n    const newFeature = geo.features[feat];\n    const geoId = geo.features[feat].properties.GEO_ID.split('US')[1];\n    if (data[geoId]) {\n      const dataItem = data[geoId];\n      const newData: AnyObject = {};\n      Object.keys(dataItem).forEach((key) => {\n        const newKey = key.split('_')[1];\n        newData[newKey] = dataItem[key];\n      });\n      newFeature.properties['dataValue'] = newData;\n      newFeatures.push(newFeature);\n    }\n  }\n  return newFeatures;\n};\n\nexport const getIntersect = (bounds: Feature<Polygon, Properties>, geo: Feature<Polygon, Properties>[]) => {\n  const intrsctPolys = [];\n  if (!geo) return [];\n  for (const i in geo) {\n    const geo_poly = geo[i];\n    const intrsct = intersect(bounds, geo_poly);\n    if (intrsct != null) {\n      intrsctPolys.push(geo_poly);\n    }\n  }\n  return intrsctPolys;\n};\n\nexport const coordsToJSON = (coords: number[][]) => {\n  const lat_NE = coords[0][0];\n  const lng_NE = coords[0][1];\n  const lat_SW = coords[1][0];\n  const lng_SW = coords[1][1];\n  const poly = [\n    [\n      [lng_NE, lat_NE],\n      [lng_NE, lat_SW],\n      [lng_SW, lat_SW],\n      [lng_SW, lat_NE],\n      [lng_NE, lat_NE],\n    ],\n  ];\n  return poly;\n};\n\nexport const createRequest = (group: string, variable: string) => {\n  const url = 'https://better-census-api.com/';\n  const request =\n\t\turl +\n\t\t'gettable?vintage=2018&dataset=acs5&group=' +\n\t\tgroup +\n\t\t'&state=36&county=*&geography=county&key=32dd72aa5e814e89c669a4664fd31dcfc3df333d&variable=' +\n\t\tvariable;\n    \n  return request;\n};\n\nexport const createChartRequest = (group: string, variable: string[]) => {\n  const url = 'https://better-census-api.com/';\n  const request =\n\t\turl +\n\t\t'gettable?vintage=2018&dataset=acs1&group=' +\n\t\tgroup +\n\t\t'&state=36&county=*&geography=county&key=32dd72aa5e814e89c669a4664fd31dcfc3df333d&variable=' +\n\t\tvariable;\n  return request;\n};\n\nconst roundUpShare = (val: number, interval: number) => {\n  const ceil = Math.ceil(val * 10) / 10;\n  if ((((ceil * 100) / interval) * 100) % 1 === 0) return ceil;\n  else return ceil + interval;\n};\n\nexport const drawChart = (data: AnyObject, target: string) => {\n  const margin = { top: 20, right: 20, bottom: 30, left: 75 },\n    width = 400 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n  const y = d3.scaleBand().range([height, 0]).padding(0.1);\n  const x = d3.scaleLinear().range([0, width]);\n\n  const svg = d3\n    .select(target)\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  const keys = Object.keys(data);\n  const values = Object.values(data);\n\n  const xMax = roundUpShare(d3.max(values), 0.1);\n  x.domain([0, xMax]);\n  y.domain(keys);\n\n\n  let bar: d3.Selection<d3.BaseType | SVGRectElement, string, SVGGElement, unknown> = svg\n    .append('g')\n    .attr('fill', 'steelblue')\n    .selectAll('rect')\n    .data(keys)\n    .join('rect')\n    .style('mix-blend-mode', 'multiply')\n    .attr('x', x(0))\n    .attr('y', (d: string) => y(d) as number)\n    .attr('width', (d) => x(data[d]) - x(0))\n    .attr('height', y.bandwidth() - 1);\n\n\n  svg.append('g').call(d3.axisLeft(y));\n\n  const xAxis = (g: any, x: d3.AxisScale<d3.AxisDomain>) =>\n    g\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(x).ticks(8, 'f', '%'))\n      .call((g: any) => (g.selection ? g.selection() : g).select('.domain').remove());\n\n  const gx = svg.append('g').call(xAxis, x);\n\n  return Object.assign(svg.node(), {\n    update(data: { [key: string]: number }) {\n      const keys = Object.keys(data);\n      const values = Object.values(data);\n      const t = svg.transition().duration(750);\n\n      let maxValue = d3.max(values);\n      if (!maxValue) maxValue = 0;\n      const xMax = roundUpShare(maxValue, 0.1);\n      //@ts-ignore\n      gx.transition(t).call(xAxis, x.domain([0, xMax]));\n      bar = bar.data(keys).call((bar: any) =>\n        bar\n          .transition(t)\n          .attr('width', (d: string) => x(data[d]) - x(0))\n          .attr('y', (d: string) => y(d))\n      );\n    },\n  });\n};\n\n"]},"metadata":{},"sourceType":"module"}