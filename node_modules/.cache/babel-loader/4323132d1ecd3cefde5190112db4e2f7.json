{"ast":null,"code":"var _jsxFileName = \"/home/pantero/Code/Codeworks/census-godzilla/src/components/DataContainer.tsx\";\nimport '../css/dataContainer.css';\nimport '../css/styles.css';\nimport React, { useEffect, useState } from 'react';\nimport { CensusSummary, edVars, raceVars } from '../data/ReferenceData';\nimport { createChartRequest, fetchCensusData } from '../helpers/Helpers';\nimport ChartSwiper from './Swiper';\n;\n\n// Function that makes calls to /helpers. Kind of like a Summary class\nconst createSummaryData = (data, varMap, sumVars, reCalc) => {\n  const summary = new CensusSummary(data, varMap);\n  if (!reCalc) summary.mapDataToDescriptor();\n  summary.getTotals();\n  Object.entries(sumVars).forEach(([key, valArr]) => {\n    summary.sumShares(valArr, key);\n  });\n  return summary;\n};\n\nconst DataContainer = ({\n  onScreen,\n  setShowDataContainer,\n  showDataContainer\n}) => {\n  const [summary, setSummary] = useState({\n    race: {},\n    education: {}\n  });\n  const [data, setData] = useState({});\n  const [ethnicDataLoad, setEthnicDataLoad] = useState(false);\n  const [educationDataLoad, setEducationDataLoad] = useState(false);\n  useEffect(() => {\n    const raceTables = Object.keys(raceVars).map(item => item.split('_')[1]);\n    const raceRequest = createChartRequest('B03002', raceTables);\n    const edTables = Object.keys(edVars).map(item => item.split('_')[1]);\n    const edRequest = createChartRequest('C15003', edTables);\n    fetchCensusData(raceRequest).then(result => {\n      const raceSummary = createSummaryData(result.geoIdValue, raceVars, {\n        Other: ['Native', 'Pacific', 'Multi', 'Other']\n      });\n      delete raceSummary.shares['Total'];\n      setData(prevData => ({ ...prevData,\n        race: raceSummary.data\n      }));\n      setSummary(() => ({ ...summary,\n        race: raceSummary.shares\n      }));\n      setEthnicDataLoad(true);\n    });\n    fetchCensusData(edRequest).then(result => {\n      const edSummary = createSummaryData(result.geoIdValue, edVars, {\n        'High School': ['High School', 'GED'],\n        'Some College': ['1 Y College', '1+ Y College', 'Associates'],\n        Graduate: [\"Master's\", 'Professional', 'Doctorate']\n      });\n      edSummary.shares['No Degree'] = edSummary.shares['Total'] - edSummary.shares['High School'] - edSummary.shares['Some College'] - edSummary.shares['Graduate'] - edSummary.shares[\"Bachelor's\"];\n      delete edSummary.shares['Total'];\n      setData(prevData => ({ ...prevData,\n        education: edSummary.data\n      }));\n      setSummary(prevData => ({ ...prevData,\n        education: edSummary.shares\n      }));\n      setEducationDataLoad(true);\n    });\n  }, []);\n  useEffect(() => {\n    if (onScreen && Object.keys(data).length) {\n      const onScreenGeoIDs = [];\n\n      for (const item of onScreen) {\n        var _item$properties;\n\n        const geoId = (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.GEO_ID.split('US')[1];\n        onScreenGeoIDs.push(geoId);\n      }\n\n      const onScreenRace = Object.assign({}, ...onScreenGeoIDs.map(key => ({\n        [key]: data.race ? data.race[key] : {}\n      })));\n      const onScreenEd = Object.assign({}, ...onScreenGeoIDs.map(key => ({\n        [key]: data.education ? data.education[key] : {}\n      })));\n      const raceSummary = createSummaryData(onScreenRace, raceVars, {\n        Other: ['Native', 'Pacific', 'Multi', 'Other']\n      }, true);\n      delete raceSummary.shares['Total'];\n      setSummary(prevData => ({ ...prevData,\n        race: raceSummary.shares\n      }));\n      const edSummary = createSummaryData(onScreenEd, edVars, {\n        'High School': ['High School', 'GED'],\n        'Some College': ['1 Y College', '1+ Y College', 'Associates'],\n        Graduate: [\"Master's\", 'Professional', 'Doctorate']\n      }, true);\n      edSummary.shares['No Degree'] = edSummary.shares['Total'] - edSummary.shares['High School'] - edSummary.shares['Some College'] - edSummary.shares['Graduate'] - edSummary.shares[\"Bachelor's\"];\n      delete edSummary.shares['Total'];\n      setSummary(prevData => ({ ...prevData,\n        education: edSummary.shares\n      }));\n    }\n  }, [onScreen]);\n  return onScreen && ethnicDataLoad && educationDataLoad ? /*#__PURE__*/React.createElement(\"div\", {\n    id: \"dataContainer\",\n    className: showDataContainer ? 'dataContainer' : 'hidden',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ChartSwiper, {\n    data: summary,\n    setShowDataContainer: setShowDataContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 3\n    }\n  }, \"Data is loading\");\n};\n\nexport default DataContainer;","map":{"version":3,"sources":["/home/pantero/Code/Codeworks/census-godzilla/src/components/DataContainer.tsx"],"names":["React","useEffect","useState","CensusSummary","edVars","raceVars","createChartRequest","fetchCensusData","ChartSwiper","createSummaryData","data","varMap","sumVars","reCalc","summary","mapDataToDescriptor","getTotals","Object","entries","forEach","key","valArr","sumShares","DataContainer","onScreen","setShowDataContainer","showDataContainer","setSummary","race","education","setData","ethnicDataLoad","setEthnicDataLoad","educationDataLoad","setEducationDataLoad","raceTables","keys","map","item","split","raceRequest","edTables","edRequest","then","result","raceSummary","geoIdValue","Other","shares","prevData","edSummary","Graduate","length","onScreenGeoIDs","geoId","properties","GEO_ID","push","onScreenRace","assign","onScreenEd"],"mappings":"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","sourcesContent":["import '../css/dataContainer.css';\nimport '../css/styles.css';\n\nimport React, { useEffect, useState } from 'react';\nimport { CensusSummary, edVars, raceVars, EducationCategories } from '../data/ReferenceData';\nimport { createChartRequest, fetchCensusData } from '../helpers/Helpers';\nimport ChartSwiper from './Swiper';\nimport { Feature, Polygon, Properties } from '@turf/turf';\n\ninterface Props {\n  onScreen: Feature<Polygon, Properties>[] | undefined;\n\tsetShowDataContainer: React.Dispatch<React.SetStateAction<Boolean>>;\n\tshowDataContainer: Boolean;\n};\n\ntype AnyObject = { [key: string]: any };\n\n// Function that makes calls to /helpers. Kind of like a Summary class\nconst createSummaryData = (\n\tdata: { [key: string]: EducationCategories },\n\tvarMap: AnyObject,\n\tsumVars: { [key: string]: string[] },\n\treCalc?: boolean\n) => {\n\tconst summary = new CensusSummary(data, varMap);\n\tif (!reCalc) summary.mapDataToDescriptor();\n\tsummary.getTotals();\n\tObject.entries(sumVars).forEach(([key, valArr]) => {\n\t\tsummary.sumShares(valArr, key);\n\t});\n\treturn summary;\n};\n\nconst DataContainer = ({ onScreen, setShowDataContainer, showDataContainer }: Props) => {\n\tconst [summary, setSummary] = useState({ race: {}, education: {} });\n\tconst [data, setData] = useState<AnyObject>({});\n\tconst [ethnicDataLoad, setEthnicDataLoad] = useState<Boolean>(false);\n\tconst [educationDataLoad, setEducationDataLoad] = useState<Boolean>(false);\n\n\tuseEffect(() => {\n\t\tconst raceTables = Object.keys(raceVars).map((item) => item.split('_')[1]);\n\t\tconst raceRequest = createChartRequest('B03002', raceTables);\n\t\tconst edTables = Object.keys(edVars).map((item) => item.split('_')[1]);\n\t\tconst edRequest = createChartRequest('C15003', edTables);\n\n\t\tfetchCensusData(raceRequest).then((result) => {\n\t\t\tconst raceSummary = createSummaryData(result.geoIdValue, raceVars, {\n\t\t\t\tOther: ['Native', 'Pacific', 'Multi', 'Other'],\n\t\t\t});\n\t\t\tdelete raceSummary.shares['Total'];\n\t\t\tsetData((prevData) => ({ ...prevData, race: raceSummary.data }));\n\t\t\tsetSummary(() => ({\n\t\t\t\t...summary,\n\t\t\t\trace: raceSummary.shares,\n\t\t\t}));\n\t\t\tsetEthnicDataLoad(true);\n\t\t});\n\n\t\tfetchCensusData(edRequest).then((result) => {\n\t\t\tconst edSummary = createSummaryData(result.geoIdValue, edVars, {\n\t\t\t\t'High School': ['High School', 'GED'],\n\t\t\t\t'Some College': ['1 Y College', '1+ Y College', 'Associates'],\n\t\t\t\tGraduate: [\"Master's\", 'Professional', 'Doctorate'],\n\t\t\t});\n\t\t\tedSummary.shares['No Degree'] =\n\t\t\t\tedSummary.shares['Total'] -\n\t\t\t\tedSummary.shares['High School'] -\n\t\t\t\tedSummary.shares['Some College'] -\n\t\t\t\tedSummary.shares['Graduate'] -\n\t\t\t\tedSummary.shares[\"Bachelor's\"];\n\t\t\tdelete edSummary.shares['Total'];\n\t\t\tsetData((prevData) => ({ ...prevData, education: edSummary.data }));\n\t\t\tsetSummary((prevData) => ({\n\t\t\t\t...prevData,\n\t\t\t\teducation: edSummary.shares,\n\t\t\t}));\n\t\t\tsetEducationDataLoad(true);\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (onScreen && Object.keys(data).length) {\n\t\t\tconst onScreenGeoIDs = [];\n\t\t\tfor (const item of onScreen) {\n\t\t\t\tconst geoId = item.properties?.GEO_ID.split('US')[1];\n\t\t\t\tonScreenGeoIDs.push(geoId);\n\t\t\t}\n\t\t\tconst onScreenRace = Object.assign(\n\t\t\t\t{},\n\t\t\t\t...onScreenGeoIDs.map((key) => ({\n\t\t\t\t\t[key]: data.race ? data.race[key] : {},\n\t\t\t\t}))\n\t\t\t);\n\n\t\t\tconst onScreenEd = Object.assign(\n\t\t\t\t{},\n\t\t\t\t...onScreenGeoIDs.map((key) => ({\n\t\t\t\t\t[key]: data.education ? data.education[key] : {},\n\t\t\t\t}))\n\t\t\t);\n\t\t\tconst raceSummary = createSummaryData(\n\t\t\t\tonScreenRace,\n\t\t\t\traceVars,\n\t\t\t\t{\n\t\t\t\t\tOther: ['Native', 'Pacific', 'Multi', 'Other'],\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tdelete raceSummary.shares['Total'];\n\t\t\tsetSummary((prevData) => ({ ...prevData, race: raceSummary.shares }));\n\n\t\t\tconst edSummary = createSummaryData(\n\t\t\t\tonScreenEd,\n\t\t\t\tedVars,\n\t\t\t\t{\n\t\t\t\t\t'High School': ['High School', 'GED'],\n\t\t\t\t\t'Some College': ['1 Y College', '1+ Y College', 'Associates'],\n\t\t\t\t\tGraduate: [\"Master's\", 'Professional', 'Doctorate'],\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tedSummary.shares['No Degree'] =\n\t\t\t\tedSummary.shares['Total'] -\n\t\t\t\tedSummary.shares['High School'] -\n\t\t\t\tedSummary.shares['Some College'] -\n\t\t\t\tedSummary.shares['Graduate'] -\n\t\t\t\tedSummary.shares[\"Bachelor's\"];\n\t\t\tdelete edSummary.shares['Total'];\n\t\t\tsetSummary((prevData) => ({ ...prevData, education: edSummary.shares }));\n\t\t}\n\t}, [onScreen]);\n\n\treturn onScreen && ethnicDataLoad && educationDataLoad ? (\n\t\t<div id=\"dataContainer\" className={showDataContainer ? 'dataContainer' : 'hidden'}>\n\t\t\t<ChartSwiper data={summary} setShowDataContainer={setShowDataContainer} />\n\t\t</div>\n\t) : (\n\t\t<h3>Data is loading</h3>\n\t);\n};\n\nexport default DataContainer;\n"]},"metadata":{},"sourceType":"module"}