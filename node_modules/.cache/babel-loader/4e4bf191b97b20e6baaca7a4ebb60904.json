{"ast":null,"code":"var _jsxFileName = \"/home/pantero/Code/Codeworks/census-godzilla/src/components/Map.tsx\";\nimport { polygon } from '@turf/turf';\nimport { scaleQuantile } from 'd3-scale';\nimport 'leaflet/dist/leaflet.css';\nimport React, { createRef, useEffect, useState } from 'react';\nimport { GeoJSON, Map, TileLayer, ZoomControl } from 'react-leaflet';\nimport US_counties from '../data/US_counties_5m.json';\nimport { addData, coordsToJSON, createRequest, fetchCensusData, getIntersect } from '../helpers/Helpers';\nimport { attribution, colorRange, defaultMapState, tileUrl } from '../utils/Utils';\nimport DataContainer from './DataContainer';\nimport Legend from './Legend';\n\nconst TitleBlock = ({\n  title\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 54\n  }\n}, title);\n\nconst DemoMap = ({\n  selectedVar\n}) => {\n  if (selectedVar === '') selectedVar = null;\n  const [isLoaded, setIsLoaded] = useState();\n  const [items, setItems] = useState([]);\n  const [variables, setVariables] = useState({\n    noData: {\n      name: '',\n      type: 'int'\n    }\n  });\n  const [mapVariable, setMapVariable] = useState('');\n  const [groupInfo, setGroupInfo] = useState({\n    vintage: 0,\n    description: '',\n    code: ''\n  });\n  const [colorScale, setColorScale] = useState();\n  const [quantiles, setQuantiles] = useState();\n  const [onScreen, setOnScreen] = useState();\n  const [showDataContainer, setShowDataContainer] = useState(true);\n  const mapRef = createRef();\n  const layerRef = createRef();\n\n  const handleMove = () => {\n    const map = mapRef.current.leafletElement;\n    const bounds = map.getBounds();\n    const bounds_poly = coordsToJSON([[bounds._northEast.lat, bounds._northEast.lng], [bounds._southWest.lat, bounds._southWest.lng]]);\n    const bounds_json = polygon(bounds_poly);\n    const polysOnScreen = getIntersect(bounds_json, items);\n    setOnScreen(polysOnScreen);\n  };\n\n  const updateColors = () => {\n    if (!onScreen) return;\n    const colorScale = scaleQuantile().domain(onScreen.map(d => {\n      var _d$properties;\n\n      return (_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.dataValue[mapVariable];\n    })).range(colorRange);\n    const quantiles = colorScale.quantiles();\n    setColorScale(() => colorScale);\n    setQuantiles(quantiles);\n  };\n\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n  useEffect(() => {\n    const getMapData = () => {\n      var _selectedVar, _selectedVar2;\n\n      const group = (_selectedVar = selectedVar) === null || _selectedVar === void 0 ? void 0 : _selectedVar.split('_')[0];\n      const val = (_selectedVar2 = selectedVar) === null || _selectedVar2 === void 0 ? void 0 : _selectedVar2.split('_')[1];\n      const groupVal = group ? group : '';\n      const variable = val ? val : '';\n      setMapVariable(variable);\n      const request = createRequest(groupVal, variable);\n      fetchCensusData(request).then(result => {\n        const items = addData(US_counties, result.geoIdValue);\n        const coloScale = scaleQuantile().domain(items.map(d => d.properties.dataValue[variable])).range(colorRange); //setQuantiles(coloScale.quantiles());\n\n        setVariables(result.variableInfo);\n        setGroupInfo(result.groupInfo);\n        setItems(items);\n        setColorScale(() => coloScale);\n      });\n    };\n\n    if (selectedVar) {\n      getMapData();\n    }\n  }, [selectedVar]);\n  useEffect(() => {\n    if (onScreen) {\n      setShowDataContainer(true);\n      updateColors();\n    }\n  }, [onScreen]);\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else if (colorScale) {\n    return /*#__PURE__*/React.createElement(Map, {\n      ref: mapRef,\n      center: [defaultMapState.lat, defaultMapState.lng],\n      zoom: defaultMapState.zoom,\n      style: defaultMapState.mapStyle,\n      updateWhenZooming: false,\n      updateWhenIdle: true,\n      preferCanvas: true,\n      minZoom: defaultMapState.minZoom,\n      onMoveEnd: handleMove,\n      zoomControl: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TitleBlock, {\n      title: groupInfo.vintage + ' ' + groupInfo.description + ' | ' + variables[Object.keys(variables)[0]].name.replaceAll('!!', ' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: attribution,\n      url: tileUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ZoomControl, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GeoJSON, {\n      ref: layerRef,\n      data: items,\n      style: item => {\n        return {\n          fillColor: colorScale(item ? item.properties.dataValue[mapVariable] : '#EEE'),\n          fillOpacity: 0.5,\n          weight: 0.5,\n          opacity: 0.7,\n          color: 'white',\n          dashArray: '3'\n        };\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DataContainer, {\n      onScreen: onScreen,\n      setShowDataContainer: setShowDataContainer,\n      showDataContainer: showDataContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      quantiles: quantiles,\n      colorRange: colorRange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 10\n      }\n    }));\n  } else {\n    return items ? /*#__PURE__*/React.createElement(Map, {\n      ref: mapRef,\n      center: [defaultMapState.lat, defaultMapState.lng],\n      zoom: defaultMapState.zoom,\n      style: defaultMapState.mapStyle,\n      updateWhenZooming: false,\n      updateWhenIdle: true,\n      preferCanvas: true,\n      minZoom: defaultMapState.minZoom,\n      zoomControl: false,\n      onMoveEnd: handleMove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: attribution,\n      url: tileUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ZoomControl, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, \"Data is loading...\");\n  }\n};\n\nexport default DemoMap;","map":{"version":3,"sources":["/home/pantero/Code/Codeworks/census-godzilla/src/components/Map.tsx"],"names":["polygon","scaleQuantile","React","createRef","useEffect","useState","GeoJSON","Map","TileLayer","ZoomControl","US_counties","addData","coordsToJSON","createRequest","fetchCensusData","getIntersect","attribution","colorRange","defaultMapState","tileUrl","DataContainer","Legend","TitleBlock","title","DemoMap","selectedVar","isLoaded","setIsLoaded","items","setItems","variables","setVariables","noData","name","type","mapVariable","setMapVariable","groupInfo","setGroupInfo","vintage","description","code","colorScale","setColorScale","quantiles","setQuantiles","onScreen","setOnScreen","showDataContainer","setShowDataContainer","mapRef","layerRef","handleMove","map","current","leafletElement","bounds","getBounds","bounds_poly","_northEast","lat","lng","_southWest","bounds_json","polysOnScreen","updateColors","domain","d","properties","dataValue","range","getMapData","group","split","val","groupVal","variable","request","then","result","geoIdValue","coloScale","variableInfo","zoom","mapStyle","minZoom","Object","keys","replaceAll","item","fillColor","fillOpacity","weight","opacity","color","dashArray"],"mappings":"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","sourcesContent":["import { Feature, Polygon, polygon, Properties } from '@turf/turf';\nimport { ScaleQuantile, scaleQuantile } from 'd3-scale';\nimport 'leaflet/dist/leaflet.css';\nimport React, { createRef, useEffect, useState } from 'react';\nimport { GeoJSON, Map, TileLayer, ZoomControl } from 'react-leaflet';\nimport US_counties from '../data/US_counties_5m.json';\nimport { addData, coordsToJSON, createRequest, fetchCensusData, getIntersect } from '../helpers/Helpers';\nimport { attribution, colorRange, defaultMapState, tileUrl } from '../utils/Utils';\nimport DataContainer from './DataContainer';\nimport Legend from './Legend';\n\ninterface MapReference {\n\tcurrent: any;\n}\n\ninterface QueryType {\n\t[key: string]: {\n\t\tname: string;\n\t\ttype: string;\n\t};\n}\n\nconst TitleBlock = ({ title }: { title: string }) => <div className=\"info title\">{title}</div>;\n\nconst DemoMap = ({ selectedVar }: { selectedVar: string | null }) => {\n  if (selectedVar === '') selectedVar = null;\n\n  const [isLoaded, setIsLoaded] = useState<boolean>();\n  const [items, setItems] = useState<Feature<Polygon, Properties>[]>([]);\n  const [variables, setVariables] = useState<QueryType>({ noData: { name: '', type: 'int' } });\n  const [mapVariable, setMapVariable] = useState<string>('');\n  const [groupInfo, setGroupInfo] = useState({ vintage: 0, description: '', code: '' });\n  const [colorScale, setColorScale] = useState<ScaleQuantile<string, never>>();\n  const [quantiles, setQuantiles] = useState<number[]>();\n  const [onScreen, setOnScreen] = useState<Feature<Polygon, Properties>[]>();\n  const [showDataContainer, setShowDataContainer] = useState<Boolean>(true);\n\n  const mapRef: MapReference = createRef();\n  const layerRef = createRef<GeoJSON>();\n\n  const handleMove = () => {\n    const map = mapRef.current.leafletElement;\n    const bounds = map.getBounds();\n    const bounds_poly = coordsToJSON([\n      [bounds._northEast.lat, bounds._northEast.lng],\n      [bounds._southWest.lat, bounds._southWest.lng],\n    ]);\n    const bounds_json = polygon(bounds_poly);\n    const polysOnScreen = getIntersect(bounds_json, items);\n    setOnScreen(polysOnScreen);\n  };\n\n  const updateColors = () => {\n    if (!onScreen) return;\n    const colorScale = scaleQuantile<string>()\n      .domain(onScreen.map((d) => d.properties?.dataValue[mapVariable]))\n      .range(colorRange);\n\n    const quantiles = colorScale.quantiles();\n    setColorScale(() => colorScale);\n    setQuantiles(quantiles);\n  };\n\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    const getMapData = () => {\n      const group = selectedVar?.split('_')[0];\n      const val = selectedVar?.split('_')[1];\n      const groupVal = group ? group : '';\n      const variable = val ? val : '';\n      setMapVariable(variable);\n      const request = createRequest(groupVal, variable);\n\n      fetchCensusData(request).then((result) => {\n        const items = addData(US_counties, result.geoIdValue);\n        const coloScale = scaleQuantile<string>()\n          .domain(items.map((d) => d.properties.dataValue[variable]))\n          .range(colorRange);\n        //setQuantiles(coloScale.quantiles());\n        setVariables(result.variableInfo);\n        setGroupInfo(result.groupInfo);\n        setItems(items);\n        setColorScale(() => coloScale);\n      });\n    };\n    if (selectedVar) {\n      getMapData();\n    }\n  }, [selectedVar]);\n\n  useEffect(() => {\n    if (onScreen) {\n      setShowDataContainer(true);\n      updateColors();\n    }\n  }, [onScreen]);\n\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else if (colorScale) {\n    return (\n      <Map\n        ref={mapRef}\n        center={[defaultMapState.lat, defaultMapState.lng]}\n        zoom={defaultMapState.zoom}\n        style={defaultMapState.mapStyle}\n        updateWhenZooming={false}\n        updateWhenIdle={true}\n        preferCanvas={true}\n        minZoom={defaultMapState.minZoom}\n        onMoveEnd={handleMove}\n        zoomControl={false}\n      >\n        <TitleBlock\n          title={\n            groupInfo.vintage +\n\t\t\t\t\t\t' ' +\n\t\t\t\t\t\tgroupInfo.description +\n\t\t\t\t\t\t' | ' +\n\t\t\t\t\t\tvariables[Object.keys(variables)[0]].name.replaceAll('!!', ' ')\n          }\n        />\n        <TileLayer attribution={attribution} url={tileUrl} />\n        <ZoomControl position=\"topright\" />\n        <GeoJSON\n          ref={layerRef}\n          data={items}\n          style={(item) => {\n            return {\n              fillColor: colorScale(item ? item.properties.dataValue[mapVariable] : '#EEE'),\n              fillOpacity: 0.5,\n              weight: 0.5,\n              opacity: 0.7,\n              color: 'white',\n              dashArray: '3',\n            };\n          }}\n        />\n        <DataContainer\n          onScreen={onScreen}\n          setShowDataContainer={setShowDataContainer}\n          showDataContainer = {showDataContainer}\n        />\n        {<Legend quantiles={quantiles} colorRange={colorRange} />}\n      </Map>\n    );\n  } else {\n    return items ? (\n      <Map\n        ref={mapRef}\n        center={[defaultMapState.lat, defaultMapState.lng]}\n        zoom={defaultMapState.zoom}\n        style={defaultMapState.mapStyle}\n        updateWhenZooming={false}\n        updateWhenIdle={true}\n        preferCanvas={true}\n        minZoom={defaultMapState.minZoom}\n        zoomControl={false}\n        onMoveEnd={handleMove}\n      >\n        <TileLayer attribution={attribution} url={tileUrl} />\n        <ZoomControl position=\"topright\" />\n        {/* <DataContainer /> */}\n      </Map>\n    ) : (\n      <h2>Data is loading...</h2>\n    );\n  }\n};\n\nexport default DemoMap;\n"]},"metadata":{},"sourceType":"module"}