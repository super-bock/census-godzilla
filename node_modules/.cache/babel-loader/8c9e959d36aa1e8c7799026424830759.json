{"ast":null,"code":"var _jsxFileName = \"/home/pantero/Code/Codeworks/census-godzilla/src/components/Swiper.tsx\";\nimport 'swiper/swiper-bundle.css';\nimport '../css/styles.css';\nimport React, { useEffect, useState } from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper } from 'swiper/react';\nimport { drawChart } from '../helpers/Helpers';\nSwiperCore.use([Navigation]);\n\nconst ChartSwiper = ({\n  data,\n  setShowDataContainer\n}) => {\n  const [raceChart, setRaceChart] = useState();\n  const [edChart, setEdChart] = useState();\n  useEffect(() => {\n    if (data) {\n      setRaceChart(drawChart(data.race, '#race-chart'));\n      setEdChart(drawChart(data.education, '#education-chart'));\n    }\n  }, []);\n  useEffect(() => {\n    if (raceChart) {\n      // Here we take steps to correct any errors in the data before we pass it to the chart\n      const currentValue = Object.assign({\n        Asian: 0,\n        Black: 0,\n        Hispanic: 0,\n        Other: 0,\n        White: 0\n      }, data.race);\n      let totalCount = 0;\n\n      for (const key in currentValue) {\n        if (!currentValue[key]) currentValue[key] = 0; // Correct any null or undefined values\n\n        totalCount += currentValue[key];\n      }\n\n      raceChart.update(currentValue); // If total count is zero, we're not graphing anything, so unmount the DataContainer\n\n      if (totalCount === 0) setShowDataContainer(false);\n    }\n\n    if (edChart) {\n      // Here we take steps to correct any errors in the data before we pass it to the chart\n      const currentValue = Object.assign({\n        \"Bachelor's\": 0,\n        Graduate: 0,\n        'High School': 0,\n        'No Degree': 0,\n        'Some College': 0\n      }, data.education);\n\n      for (const key in currentValue) {\n        if (!currentValue[key]) currentValue[key] = 0;\n      }\n\n      edChart.update(currentValue);\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Swiper, {\n    id: \"main\",\n    tag: \"section\",\n    wrapperTag: \"ul\",\n    navigation: true,\n    pagination: true,\n    spaceBetween: 0,\n    slidesPerView: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"swiper-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"swiper-slide\",\n    id: \"race-chart\",\n    key: 1,\n    \"data-tag\": \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"swiper-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Ethnicity\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"swiper-slide\",\n    id: \"education-chart\",\n    key: 2,\n    \"data-tag\": \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 6\n    }\n  }, ' ', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"swiper-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Education\")))));\n};\n\nexport default ChartSwiper;","map":{"version":3,"sources":["/home/pantero/Code/Codeworks/census-godzilla/src/components/Swiper.tsx"],"names":["React","useEffect","useState","SwiperCore","Navigation","Swiper","drawChart","use","ChartSwiper","data","setShowDataContainer","raceChart","setRaceChart","edChart","setEdChart","race","education","currentValue","Object","assign","Asian","Black","Hispanic","Other","White","totalCount","key","update","Graduate"],"mappings":"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","sourcesContent":["import 'swiper/swiper-bundle.css';\nimport '../css/styles.css';\n\nimport React, { useEffect, useState } from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper } from 'swiper/react';\n\nimport { drawChart } from '../helpers/Helpers';\nimport ReactDOM from 'react-dom';\n\n//import \"swiper/components/navigation/navigation.scss\"; // Import Swiper styles\n//import 'swiper/swiper.scss';\n// install Swiper modules\n\ntype AnyObject = { [key: string]: any };\n\ninterface SummeryData {\n\tdata: {\n\t\trace: AnyObject;\n\t\teducation: AnyObject;\n\t};\n\tsetShowDataContainer: React.Dispatch<React.SetStateAction<Boolean>>;\n}\n\nSwiperCore.use([Navigation]);\nconst ChartSwiper = ({ data, setShowDataContainer }: SummeryData) => {\n\tconst [raceChart, setRaceChart] = useState<AnyObject>();\n\tconst [edChart, setEdChart] = useState<AnyObject>();\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tsetRaceChart(drawChart(data.race, '#race-chart'));\n\t\t\tsetEdChart(drawChart(data.education, '#education-chart'));\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (raceChart) {\n\t\t\t// Here we take steps to correct any errors in the data before we pass it to the chart\n\t\t\tconst currentValue = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tAsian: 0,\n\t\t\t\t\tBlack: 0,\n\t\t\t\t\tHispanic: 0,\n\t\t\t\t\tOther: 0,\n\t\t\t\t\tWhite: 0,\n\t\t\t\t},\n\t\t\t\tdata.race\n\t\t\t);\n\t\t\tlet totalCount = 0;\n\t\t\tfor (const key in currentValue) {\n\t\t\t\tif (!currentValue[key]) currentValue[key] = 0; // Correct any null or undefined values\n\t\t\t\ttotalCount += currentValue[key];\n\t\t\t}\n\t\t\traceChart.update(currentValue);\n\t\t\t// If total count is zero, we're not graphing anything, so unmount the DataContainer\n\t\t\tif (totalCount === 0) setShowDataContainer(false);\n\t\t}\n\n\t\tif (edChart) {\n\t\t\t// Here we take steps to correct any errors in the data before we pass it to the chart\n\t\t\tconst currentValue = Object.assign(\n\t\t\t\t{\n\t\t\t\t\t\"Bachelor's\": 0,\n\t\t\t\t\tGraduate: 0,\n\t\t\t\t\t'High School': 0,\n\t\t\t\t\t'No Degree': 0,\n\t\t\t\t\t'Some College': 0,\n\t\t\t\t},\n\t\t\t\tdata.education\n\t\t\t);\n\t\t\tfor (const key in currentValue) {\n\t\t\t\tif (!currentValue[key]) currentValue[key] = 0;\n\t\t\t}\n\t\t\tedChart.update(currentValue);\n\t\t}\n\t}, [data]);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Swiper id=\"main\" tag=\"section\" wrapperTag=\"ul\" navigation pagination spaceBetween={0} slidesPerView={1}>\n\t\t\t\t<div className=\"swiper-wrapper\">\n\t\t\t\t\t<div className=\"swiper-slide\" id=\"race-chart\" key={1} data-tag=\"li\">\n\t\t\t\t\t\t<div className=\"swiper-title\">Ethnicity</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"swiper-slide\" id=\"education-chart\" key={2} data-tag=\"li\">\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<div className=\"swiper-title\">Education</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Swiper>\n\t\t</React.Fragment>\n\t);\n};\nexport default ChartSwiper;\n"]},"metadata":{},"sourceType":"module"}