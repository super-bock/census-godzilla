{"ast":null,"code":"// https://codesandbox.io/s/how-to-add-a-legend-to-the-map-using-react-leaflet-6yqs5?file=/src/Map.js\nimport { MapControl, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nclass Legend extends MapControl {\n  constructor(...args) {\n    super(...args);\n    this.legend = L.control({\n      position: 'bottomright'\n    });\n\n    this.createLegend = () => {\n      const div = L.DomUtil.create('div', 'info legend');\n      const grades = this.props.quantiles ? this.props.quantiles : [];\n      const colors = this.props.colorRange;\n      const labels = [];\n      let from;\n      let to;\n\n      for (let i = 0; i < (grades === null || grades === void 0 ? void 0 : grades.length); i++) {\n        from = Math.floor(grades[i]);\n        to = grades[i + 1];\n        labels.push('<i style=\"background:' + colors[i] + '\"></i> ' + from + (to ? '' : '+'));\n      }\n\n      div.innerHTML = labels.join('<br>');\n      return div;\n    };\n  }\n\n  //@ts-ignore\n  createLeafletElement() {} //@ts-ignore\n\n\n  componentDidMount() {\n    const {\n      map\n    } = this.props.leaflet;\n    this.legend.onAdd = this.createLegend;\n    if (map) this.legend.addTo(map);\n  } // this should only update the div\n\n\n  componentDidUpdate() {\n    const {\n      map\n    } = this.props.leaflet;\n    map.removeControl(this.legend);\n    this.legend.onAdd = this.createLegend;\n    if (map) this.legend.addTo(map);\n  }\n\n}\n\nexport default withLeaflet(Legend);","map":{"version":3,"sources":["/home/pantero/Code/Codeworks/census-godzilla/src/components/Legend.tsx"],"names":["MapControl","withLeaflet","L","Legend","legend","control","position","createLegend","div","DomUtil","create","grades","props","quantiles","colors","colorRange","labels","from","to","i","length","Math","floor","push","innerHTML","join","createLeafletElement","componentDidMount","map","leaflet","onAdd","addTo","componentDidUpdate","removeControl"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,eAAxC;AACA,OAAOC,CAAP,MAAc,SAAd;;AAOA,MAAMC,MAAN,SAAqBH,UAArB,CAAuC;AAAA;AAAA;AAAA,SAKrCI,MALqC,GAK5BF,CAAC,CAACG,OAAF,CAAU;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAV,CAL4B;;AAAA,SAOrCC,YAPqC,GAOtB,MAAM;AAEnB,YAAMC,GAAG,GAAGN,CAAC,CAACO,OAAF,CAAUC,MAAV,CAAiB,KAAjB,EAAwB,aAAxB,CAAZ;AACA,YAAMC,MAAM,GAAI,KAAKC,KAAL,CAAWC,SAAZ,GAAwB,KAAKD,KAAL,CAAWC,SAAnC,GAA6C,EAA5D;AACA,YAAMC,MAAM,GAAG,KAAKF,KAAL,CAAWG,UAA1B;AACA,YAAMC,MAAM,GAAG,EAAf;AACA,UAAIC,IAAJ;AACA,UAAIC,EAAJ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGR,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAES,MAAX,CAAjB,EAAoCD,CAAC,EAArC,EAAyC;AACvCF,QAAAA,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWX,MAAM,CAACQ,CAAD,CAAjB,CAAP;AACAD,QAAAA,EAAE,GAAGP,MAAM,CAACQ,CAAC,GAAG,CAAL,CAAX;AACAH,QAAAA,MAAM,CAACO,IAAP,CACE,0BAA0BT,MAAM,CAACK,CAAD,CAAhC,GAAsC,SAAtC,GAAkDF,IAAlD,IAA0DC,EAAE,GAAG,EAAH,GAAQ,GAApE,CADF;AAGD;;AAEDV,MAAAA,GAAG,CAACgB,SAAJ,GAAgBR,MAAM,CAACS,IAAP,CAAY,MAAZ,CAAhB;AACA,aAAOjB,GAAP;AACD,KA1BoC;AAAA;;AACrC;AACAkB,EAAAA,oBAAoB,GAAG,CAAE,CAFY,CAIrC;;;AAwBAC,EAAAA,iBAAiB,GAAG;AAElB,UAAM;AAAEC,MAAAA;AAAF,QAAU,KAAKhB,KAAL,CAAWiB,OAA3B;AACA,SAAKzB,MAAL,CAAY0B,KAAZ,GAAoB,KAAKvB,YAAzB;AACA,QAAIqB,GAAJ,EAAS,KAAKxB,MAAL,CAAY2B,KAAZ,CAAkBH,GAAlB;AACV,GAjCoC,CAmCrC;;;AACAI,EAAAA,kBAAkB,GAAG;AACnB,UAAM;AAAEJ,MAAAA;AAAF,QAAU,KAAKhB,KAAL,CAAWiB,OAA3B;AACAD,IAAAA,GAAG,CAACK,aAAJ,CAAkB,KAAK7B,MAAvB;AACA,SAAKA,MAAL,CAAY0B,KAAZ,GAAoB,KAAKvB,YAAzB;AACA,QAAIqB,GAAJ,EAAS,KAAKxB,MAAL,CAAY2B,KAAZ,CAAkBH,GAAlB;AACV;;AAzCoC;;AA4CvC,eAAe3B,WAAW,CAACE,MAAD,CAA1B","sourcesContent":["// https://codesandbox.io/s/how-to-add-a-legend-to-the-map-using-react-leaflet-6yqs5?file=/src/Map.js\nimport { MapControl, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\ntype Props = {\n  quantiles:number[] | undefined;\n  colorRange:string[];\n  leaflet: any;\n}\nclass Legend extends MapControl<Props> {\n  //@ts-ignore\n  createLeafletElement() {}\n\n  //@ts-ignore\n  legend = L.control({ position: 'bottomright' });\n\n  createLegend = () => {\n\n    const div = L.DomUtil.create('div', 'info legend');\n    const grades = (this.props.quantiles)? this.props.quantiles:[];\n    const colors = this.props.colorRange;\n    const labels = [];\n    let from;\n    let to;\n\n    for (let i = 0; i < grades?.length; i++) {\n      from = Math.floor(grades[i]);\n      to = grades[i + 1];\n      labels.push(\n        '<i style=\"background:' + colors[i] + '\"></i> ' + from + (to ? '' : '+')\n      );\n    }\n\n    div.innerHTML = labels.join('<br>');\n    return div;\n  };\n\n  componentDidMount() {\n\n    const { map } = this.props.leaflet;\n    this.legend.onAdd = this.createLegend;\n    if (map) this.legend.addTo(map);\n  }\n\n  // this should only update the div\n  componentDidUpdate() {\n    const { map } = this.props.leaflet;\n    map.removeControl(this.legend);\n    this.legend.onAdd = this.createLegend;\n    if (map) this.legend.addTo(map);\n  }\n}\n\nexport default withLeaflet(Legend);\n"]},"metadata":{},"sourceType":"module"}