{"ast":null,"code":"var _jsxFileName = \"/home/pantero/Code/Codeworks/census-godzilla/src/App.tsx\";\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/typeahead.css';\nimport React, { useEffect, useState } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport Form from 'react-bootstrap/Form';\nimport Map from './components/DemoMap';\nconst censusKey = '32dd72aa5e814e89c669a4664fd31dcfc3df333d';\nconst acsCall = 'https://better-census-api.com/finddataset?vintage=*&search=ACS,detailed%20tables';\nconst tablesCall = 'https://better-census-api.com/findtable?search=*&datasetid=$id';\nconst variablesCall = 'https://better-census-api.com/gettable?vintage=2018&dataset=acs5&state=10&county=*&group=$group&variable=*&geography=tract&key=$key';\n\nconst App = () => {\n  const [tables, setTables] = useState([]);\n  const [variables, setVariables] = useState([]);\n  const [selectedVar, setSelectedVar] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [datasets, setDatasets] = useState([]);\n\n  const getTables = e => {\n    fetch(tablesCall.replace('$id', e.target.value)).then(res => res.json()).then(result => {\n      setTables(result.Groups.flatMap(data => Object.entries(data).map(([key, value]) => ({\n        [key]: [value]\n      }))));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const getVariables = e => {\n    if (e[0] !== undefined) {\n      fetch(variablesCall.replace('$group', Object.keys(e[0])[0]).replace('$key', censusKey)).then(res => res.json()).then(result => {\n        setVariables(Object.entries(result.variableInfo).map(([key, value]) => ({\n          [key]: Object.values(value)\n        })));\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      console.log('can\\'t get variables');\n    }\n  };\n\n  const setVariable = e => {\n    if (!Array.isArray(e) || !(e === null || e === void 0 ? void 0 : e.length)) return setSelectedVar('');\n    const selectedQuery = Object.keys(e[0])[0];\n    setSelectedVar(selectedQuery);\n  };\n\n  useEffect(() => {\n    fetch(acsCall).then(res => res.json()).then(data => {\n      const datasetsAPI = data.map(d => {\n        return {\n          id: d.Dataset_ID,\n          vintage: d.Vintage,\n          title: d.Title\n        };\n      });\n      setIsLoaded(true);\n      setDatasets([{\n        id: 0,\n        vintage: 0,\n        title: '(Select dataset)'\n      }].concat(datasetsAPI));\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 10\n      }\n    }, \"Loading...\");\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      id: \"dataset\",\n      size: \"sm\",\n      as: \"select\",\n      onChange: getTables,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, datasets.map((dataset, idx) => /*#__PURE__*/React.createElement(\"option\", {\n      key: idx,\n      value: dataset.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, dataset.vintage + ' ' + dataset.title))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Typeahead, {\n      id: \"group\",\n      size: \"small\",\n      onChange: getVariables,\n      labelKey: option => {\n        return option[Object.keys(option)[0]][0];\n      },\n      options: tables,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Typeahead, {\n      id: \"variable\",\n      size: \"small\",\n      onChange: setVariable,\n      filterBy: option => {\n        return !!option[Object.keys(option)[0]][0].match(/^Estimate!!/i);\n      },\n      labelKey: option => {\n        return option[Object.keys(option)[0]][0].replace(/Estimate!!Total!!/g, '').replace(/!!/g, '|');\n      },\n      options: variables,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Map, {\n      selectedVar: selectedVar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }));\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/home/pantero/Code/Codeworks/census-godzilla/src/App.tsx"],"names":["React","useEffect","useState","Typeahead","Form","Map","censusKey","acsCall","tablesCall","variablesCall","App","tables","setTables","variables","setVariables","selectedVar","setSelectedVar","isLoaded","setIsLoaded","datasets","setDatasets","getTables","e","fetch","replace","target","value","then","res","json","result","Groups","flatMap","data","Object","entries","map","key","catch","error","console","log","getVariables","undefined","keys","variableInfo","values","setVariable","Array","isArray","length","selectedQuery","datasetsAPI","d","id","Dataset_ID","vintage","Vintage","title","Title","concat","dataset","idx","option","match"],"mappings":"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","sourcesContent":["import 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/typeahead.css';\n\nimport React, { useEffect, useState } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport Form from 'react-bootstrap/Form';\n\nimport Map from './components/DemoMap';\n\nconst censusKey = '32dd72aa5e814e89c669a4664fd31dcfc3df333d';\n\nconst acsCall = 'https://better-census-api.com/finddataset?vintage=*&search=ACS,detailed%20tables';\nconst tablesCall = 'https://better-census-api.com/findtable?search=*&datasetid=$id';\n\nconst variablesCall =\n'https://better-census-api.com/gettable?vintage=2018&dataset=acs5&state=10&county=*&group=$group&variable=*&geography=tract&key=$key';\n\nconst App = () => {\ninterface DatasetParameters {\nid: number;\nvintage: number;\ntitle: string;\n}\ninterface InitialQueryType {\nname: string;\ntype: string;\n}\nconst [tables, setTables] = useState<CensusLabel[]>([]);\nconst [variables, setVariables] = useState<CensusLabel[]>([]);\nconst [selectedVar, setSelectedVar] = useState<string>('');\nconst [isLoaded, setIsLoaded] = useState(false);\nconst [datasets, setDatasets] = useState<DatasetParameters[]>([]);\n\n\ntype CensusLabel = { [key: string]: string[] };\n\ninterface TableCategories {\nAccessURL: string;\nDataset: string;\nGroups: { [key: string]: string }[];\n}\nconst getTables = (e: React.ChangeEvent<HTMLInputElement>) => {\n  fetch(tablesCall.replace('$id', e.target.value))\n    .then((res) => res.json())\n    .then((result: TableCategories) => {\n      setTables(\n        result.Groups.flatMap((data: { [key: string]: string }) =>\n          Object.entries(data).map(([key, value]) => ({ [key]: [value] }))\n        )\n      );\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\n\nconst getVariables = (e: CensusLabel[]): void => {\n  if (e[0] !== undefined) {\n    fetch(variablesCall.replace('$group', Object.keys(e[0])[0]).replace('$key', censusKey))\n      .then((res) => res.json())\n      .then((result: { variableInfo: { [key: string]: InitialQueryType } }) => {\n        setVariables(\n          Object.entries(result.variableInfo).map(([key, value]) => ({ [key]: Object.values(value) }))\n        );\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  } else {\n    console.log('can\\'t get variables');\n  }\n};\n\nconst setVariable = (e: CensusLabel[]) => {\n  if ( !Array.isArray(e)|| !e?.length) return setSelectedVar('');\n  const selectedQuery = Object.keys(e[0])[0];\n  setSelectedVar( selectedQuery );\n\n};\n\ninterface UnprocessedCensusYearsData {\nDataset_ID: number;\nTitle: string;\nVintage: number;\n}\n\nuseEffect(() => {\n  fetch(acsCall)\n    .then((res) => res.json())\n    .then((data: UnprocessedCensusYearsData[]) => {\n      const datasetsAPI = data.map((d) => {\n        return { id: d.Dataset_ID, vintage: d.Vintage, title: d.Title };\n      });\n      setIsLoaded(true);\n      setDatasets([{ id: 0, vintage: 0, title: '(Select dataset)' }].concat(datasetsAPI));\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n}, []);\n\nif (!isLoaded) {\n  return <div>Loading...</div>;\n} else {\n  return (\n    <>\n      <div className=\"form-container\">\n        <Form.Group>\n          <Form.Control id=\"dataset\" size=\"sm\" as=\"select\" onChange={getTables}>\n            {datasets.map((dataset, idx) => (\n              <option key={idx} value={dataset.id}>\n                {dataset.vintage + ' ' + dataset.title}\n              </option>\n            ))}\n          </Form.Control>\n          <br />\n          {\n            <Typeahead\n              id=\"group\"\n              size=\"small\"\n              onChange={getVariables}\n              labelKey={(option) => {\n                return option[Object.keys(option)[0]][0];\n              }}\n              options={tables}\n            />\n          }\n          <br />\n          {\n            <Typeahead\n              id=\"variable\"\n              size=\"small\"\n              onChange={setVariable}\n              filterBy={(option) => {\n                return !!option[Object.keys(option)[0]][0].match(/^Estimate!!/i);\n              }}\n              labelKey={(option) => {\n                return option[Object.keys(option)[0]][0]\n                  .replace(/Estimate!!Total!!/g, '')\n                  .replace(/!!/g, '|');\n              }}\n              options={variables}\n            />\n          }\n        </Form.Group>\n      </div>\n      <Map selectedVar={selectedVar} />\n    </>\n  );\n}\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}